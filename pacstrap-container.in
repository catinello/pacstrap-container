#!/bin/bash

VERSION="0.4"
LICENSE="MIT"

MACHINEDIR="/var/lib/machines"
CONFIGDIR="/etc/systemd/system/multi-user.target.wants"
SPARE="logrotate diffutils inetutils dhcpcd netctl jfsutils cryptsetup lvm2 device-mapper mdadm pciutils pcmciautils reiserfsprogs usbutils xfsprogs linux"

BOOT=""
QUIET=""

usage() {
	cat <<EOF
Usage: ${0##*/} (create|delete) [OPTIONS] NAME
Description:
  (COMMANDS):
	create		create a new base container
	delete		delete a container

  [OPTIONS]:
	create
		-b	enable container startup on boot
		-q	no output
	delete
		-q	no output

  NAME:
	systemd container/machine name

Version: $VERSION - License: $LICENSE
EOF
}

msg() {
	if [ "$QUIET" == "" ]; then
		if [ "$2" == "nc" ]; then
			echo -n "$1"
			echo "$1" 2>&1 | logger -t ${0##*/}
		else
			echo -e -n "\033[0;32m$1\033[0m"
			echo "$1" 2>&1 | logger -t ${0##*/}
		fi
	fi
}

newline() {
        if [ "$QUIET" == "" ]; then
                echo 
        fi
}


err() {
	if [ "$QUIET" == "" ]; then
		echo -e "\033[0;31m$1\033[0m"
		echo "$1" 2>&1 | logger -t ${0##*/}
	fi
}

log() {
	eval $1 2>&1 | logger -t ${0##*/}
	RV=${PIPESTATUS[0]}
	if [ "$RV" -ne "0" ]; then
		if [ "$2" != "skip" ]; then
			err "Error: With return value -> $RV"
			exit $RV
		fi
	fi
}

syncMetaData() {
	log "/usr/bin/arch-chroot $MACHINEDIR/$NAME pacman -Syu"
}

removePackage() {
	if [ "$1" != "$(pacman -Qtdq)" ]; then
		log "/usr/bin/arch-chroot $MACHINEDIR/$NAME pacman -Rns --noconfirm $1"
	else
		log "/usr/bin/arch-chroot $MACHINEDIR/$NAME pacman -Rns --noconfirm $1" skip
	fi
}

executeCommand() {
	log "/usr/bin/arch-chroot $MACHINEDIR/$NAME $1"
}

createContainer() {
	if [ -d "$MACHINEDIR/$NAME" ]; then
		err "Error: Machine name already exists."
		exit 90
	else
		msg "creating"
		msg " -> " "nc"
		mkdir $MACHINEDIR/$NAME

		msg "installing"
		msg " -> " "nc"
		log "/usr/bin/pacstrap -G -c -d $MACHINEDIR/$NAME base core/run-parts"

		msg "cleanup"
		msg " -> " "nc"
		syncMetaData
		removePackage "$SPARE"
		removePackage "$(pacman -Qtdq)"

		msg "modify"
		msg " -> " "nc"
		if [ -n "$BOOT" ]; then
			log "/usr/bin/systemctl enable systemd-nspawn@$NAME.service"
		fi
		executeCommand "/usr/bin/sed -i '/# End of file/i pts/0' /etc/securetty"
		log "ln -s /usr/lib/systemd/system/systemd-nspawn@.service $CONFIGDIR/systemd-nspawn@$NAME.service"
		log "/usr/bin/systemctl daemon-reload"

		msg "done"
		newline
	fi
}

deleteContainer() {
	if [ ! -d "$MACHINEDIR/$NAME" ]; then
		err "Error: Machine $NAME does not exist."
	else
		log "/usr/bin/systemctl stop systemd-nspawn@$NAME.service"
		log "/usr/bin/systemctl disable systemd-nspawn@$NAME.service"
		log "rm -frv $MACHINEDIR/$NAME"
		log "rm -fv $CONFIGDIR/systemd-nspawn@$NAME.service"
		log "/usr/bin/systemctl daemon-reload"
		msg "Machine $NAME successfully deleted."
		newline
	fi
}


if [ "$#" -ge "2" ]; then
	NAME=${@: -1}
	if [[ $NAME =~ ^-.* ]]; then
		usage
		exit 91
	fi
else
	usage
	exit 91
fi

if [ "$EUID" -ne 0 ]; then
	err "Error: Please run as root!"
	exit 91
fi

for i in $(hostnamectl); do 
	if [ "$i" == "container" ]; then 
		err "Error: Please don't run inside of a container!"
		exit 91
	fi
done

case $1 in
	create)
		shift
		while getopts "bqs" opt; do
		    case $opt in
			b)
		            BOOT=yes
		            ;;
			q)
			    QUIET=yes
			    ;;
		        *)
			    usage
		            exit 91
		            ;;
		    esac
		done

		createContainer
		;;
	delete)
		shift
		while getopts "q" opt; do
                    case $opt in
                        q)
                            QUIET=yes
                            ;;
                        *)
                            usage
                            exit 91
                            ;;
                    esac
                done

		deleteContainer
		;;
	*)
		usage
		exit 91
		;;
esac
